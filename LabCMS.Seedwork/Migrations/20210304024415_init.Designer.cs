// <auto-generated />
using System;
using LabCMS.Seedwork;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace LabCMS.Seedwork.Migrations
{
    [DbContext(typeof(Repository))]
    [Migration("20210304024415_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("LabCMS.Seedwork.EquipmentDomain.EquipmentHourlyRate", b =>
                {
                    b.Property<string>("EquipmentNo")
                        .HasColumnType("text");

                    b.Property<string>("EquipmentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HourlyRate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MachineCategory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EquipmentNo");

                    b.ToTable("EquipmentHourlyRates");
                });

            modelBuilder.Entity("LabCMS.Seedwork.EquipmentDomain.MachineDownRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EquipmentNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("MachineDownDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("MachineRepairedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MachineDownRecords");
                });

            modelBuilder.Entity("LabCMS.Seedwork.EquipmentDomain.UsageRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("EndTime")
                        .HasColumnType("bigint");

                    b.Property<string>("EquipmentNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint");

                    b.Property<string>("TestNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TestType")
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentNo");

                    b.HasIndex("ProjectNo");

                    b.HasIndex("StartTime");

                    b.ToTable("EquipmentUsageRecords");
                });

            modelBuilder.Entity("LabCMS.Seedwork.FixtureDomain.CheckinRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ApplicantUserId")
                        .HasColumnType("text");

                    b.Property<long>("CheckinDate")
                        .HasColumnType("bigint");

                    b.Property<int>("CheckoutRecordId")
                        .HasColumnType("integer");

                    b.Property<int>("FixtureNo")
                        .HasColumnType("integer");

                    b.Property<string>("FixtureRoomApproverId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantUserId");

                    b.HasIndex("CheckoutRecordId");

                    b.HasIndex("FixtureNo");

                    b.HasIndex("FixtureRoomApproverId");

                    b.ToTable("FixtureCheckinRecords");
                });

            modelBuilder.Entity("LabCMS.Seedwork.FixtureDomain.CheckoutRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ApplicantUserId")
                        .HasColumnType("text");

                    b.Property<long>("CheckoutDate")
                        .HasColumnType("bigint");

                    b.Property<int>("FixtureNo")
                        .HasColumnType("integer");

                    b.Property<string>("FixtureRoomApproverId")
                        .HasColumnType("text");

                    b.Property<long>("PlanndReturnDate")
                        .HasColumnType("bigint");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceiverCompany")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TestRoomApproverUserId")
                        .HasColumnType("text");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantUserId");

                    b.HasIndex("FixtureNo");

                    b.HasIndex("FixtureRoomApproverId");

                    b.HasIndex("TestRoomApproverUserId");

                    b.ToTable("FixtureCheckoutRecords");
                });

            modelBuilder.Entity("LabCMS.Seedwork.FixtureDomain.Fixture", b =>
                {
                    b.Property<int>("No")
                        .HasColumnType("integer");

                    b.Property<string>("AssetNo")
                        .HasColumnType("text");

                    b.Property<int>("FloorNo")
                        .HasColumnType("integer");

                    b.Property<bool>("InFixtureRoom")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("ProjectShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SetIndex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ShelfNo")
                        .HasColumnType("integer");

                    b.Property<string>("StorageInformation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TestFieldName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("No");

                    b.HasIndex("TestFieldName");

                    b.ToTable("Fixtures");
                });

            modelBuilder.Entity("LabCMS.Seedwork.FixtureDomain.Role", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("AuthLevel")
                        .HasColumnType("integer");

                    b.Property<string>("ResponseTestFieldName")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("ResponseTestFieldName");

                    b.ToTable("FixtureDomainRoles");
                });

            modelBuilder.Entity("LabCMS.Seedwork.PersonnelDomain.Person", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordMD5MD5")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("LabCMS.Seedwork.ProjectDomain.Project", b =>
                {
                    b.Property<string>("No")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameInFIN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("No");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("LabCMS.Seedwork.TestFieldDomain.TestField", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("TestFields");
                });

            modelBuilder.Entity("LabCMS.Seedwork.Version", b =>
                {
                    b.Property<string>("No")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("No");

                    b.ToTable("Versions");

                    b.HasData(
                        new
                        {
                            No = "1.0.0",
                            Comment = "Initial Version"
                        },
                        new
                        {
                            No = "1.0.1",
                            Comment = "Include source code in nuget package"
                        });
                });

            modelBuilder.Entity("LabCMS.Seedwork.EquipmentDomain.MachineDownRecord", b =>
                {
                    b.HasOne("LabCMS.Seedwork.PersonnelDomain.Person", "Applicant")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("LabCMS.Seedwork.EquipmentDomain.UsageRecord", b =>
                {
                    b.HasOne("LabCMS.Seedwork.EquipmentDomain.EquipmentHourlyRate", "EquipmentHourlyRate")
                        .WithMany()
                        .HasForeignKey("EquipmentNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabCMS.Seedwork.ProjectDomain.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentHourlyRate");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("LabCMS.Seedwork.FixtureDomain.CheckinRecord", b =>
                {
                    b.HasOne("LabCMS.Seedwork.FixtureDomain.Role", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantUserId");

                    b.HasOne("LabCMS.Seedwork.FixtureDomain.CheckoutRecord", "CheckoutRecord")
                        .WithMany()
                        .HasForeignKey("CheckoutRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabCMS.Seedwork.FixtureDomain.Fixture", "Fixture")
                        .WithMany()
                        .HasForeignKey("FixtureNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabCMS.Seedwork.FixtureDomain.Role", "FixtureRoomApprover")
                        .WithMany()
                        .HasForeignKey("FixtureRoomApproverId");

                    b.Navigation("Applicant");

                    b.Navigation("CheckoutRecord");

                    b.Navigation("Fixture");

                    b.Navigation("FixtureRoomApprover");
                });

            modelBuilder.Entity("LabCMS.Seedwork.FixtureDomain.CheckoutRecord", b =>
                {
                    b.HasOne("LabCMS.Seedwork.FixtureDomain.Role", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantUserId");

                    b.HasOne("LabCMS.Seedwork.FixtureDomain.Fixture", "Fixture")
                        .WithMany()
                        .HasForeignKey("FixtureNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabCMS.Seedwork.FixtureDomain.Role", "FixtureRoomApprover")
                        .WithMany()
                        .HasForeignKey("FixtureRoomApproverId");

                    b.HasOne("LabCMS.Seedwork.FixtureDomain.Role", "TestRoomApprover")
                        .WithMany()
                        .HasForeignKey("TestRoomApproverUserId");

                    b.Navigation("Applicant");

                    b.Navigation("Fixture");

                    b.Navigation("FixtureRoomApprover");

                    b.Navigation("TestRoomApprover");
                });

            modelBuilder.Entity("LabCMS.Seedwork.FixtureDomain.Fixture", b =>
                {
                    b.HasOne("LabCMS.Seedwork.TestFieldDomain.TestField", "TestField")
                        .WithMany("Fixtures")
                        .HasForeignKey("TestFieldName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestField");
                });

            modelBuilder.Entity("LabCMS.Seedwork.FixtureDomain.Role", b =>
                {
                    b.HasOne("LabCMS.Seedwork.TestFieldDomain.TestField", "ResponseTestField")
                        .WithMany("Roles")
                        .HasForeignKey("ResponseTestFieldName");

                    b.HasOne("LabCMS.Seedwork.PersonnelDomain.Person", "Person")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("ResponseTestField");
                });

            modelBuilder.Entity("LabCMS.Seedwork.TestFieldDomain.TestField", b =>
                {
                    b.Navigation("Fixtures");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
